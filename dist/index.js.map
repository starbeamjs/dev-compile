{"version":3,"file":"index.js","sources":["../src/rollup/plugins/replace.ts","../src/rollup/plugins/import-meta.ts","../src/rollup/plugins/inline.ts","../src/constants.ts","../src/rollup/plugins/external.ts","../src/rollup/plugins/typescript.ts","../src/rollup/rollup.ts"],"sourcesContent":["// originally from: https://github.com/vitejs/vite/blob/51e9c83458e30e3ce70abead14e02a7b353322d9/src/node/build/buildPluginReplace.ts\n\nimport type { TransformResult } from \"rollup\";\n\nimport type { RollupPlugin } from \"../utils.js\";\n\nconst { default: MagicString } = await import(\"magic-string\");\n\n/** @typedef {import(\"rollup\").TransformResult} TransformResult */\n/** @typedef {import(\"rollup\").Plugin} RollupPlugin */\n\n/**\n * Replace literal strings in code with specified replacements with sourcemap\n * support.\n *\n * Example rollup config:\n *\n * ```js\n * import { replace } from \"@starbeam-dev/compile\";\n *\n * export default {\n *   // ...\n *   plugins: [\n *     replace({ \"import.meta.hello\": `\"world\"` })\n *   ]\n * };\n * ```\n *\n * This will replace any instances of `import.meta.hello` in source modules with\n * the content `\"world\"`.\n *\n * The main purpose of this plugin is to replace dynamic variables with\n * build-time constant values, which can then be further processed by a\n * minification pass.\n *\n * For example, the `importMeta` plugin replaces `import.meta.env.DEV` with\n * `true` in development mode and `false` in production mode. In production,\n * source code guarded with `if (import.meta.env.DEV)` will be emitted as `if\n * (false)`. The subsequent minification pass will remove the entire `if` block,\n * including its contents.\n *\n * @param {(id: string) => boolean} test\n * @param {Record<string, string>} replacements @param {boolean} sourcemap\n *\n * @returns {RollupPlugin}\n */\nexport function createReplacePlugin(\n  test: (id: string) => boolean,\n  replacements: Record<string, string>,\n  sourcemap: boolean,\n): RollupPlugin {\n  const pattern = new RegExp(\n    \"\\\\b(\" +\n      Object.keys(replacements)\n        .map((str) => {\n          return str.replace(/[-[\\]/{}()*+?.\\\\^$|]/g, \"\\\\$&\");\n        })\n        .join(\"|\") +\n      \")\\\\b\",\n    \"g\",\n  );\n\n  return {\n    name: \"starbeam:replace\",\n\n    transform(code: string, id: string): TransformResult {\n      if (test(id)) {\n        const s = new MagicString(code);\n        let hasReplaced = false;\n\n        let match: RegExpMatchArray | null;\n\n        while ((match = pattern.exec(code))) {\n          hasReplaced = true;\n          const start = match.index as number;\n          const [wholeMatch, partialMatch] = match as [string, string];\n\n          const end = start + wholeMatch.length;\n          const replacement = replacements[partialMatch];\n\n          if (replacement === undefined) {\n            throw new Error(\n              `Unexpected missing replacement for \"${partialMatch}\".\\n\\nReplacements were ${JSON.stringify(\n                replacements,\n                null,\n                STRINGIFY_SPACES,\n              )}`,\n            );\n          }\n\n          s.overwrite(start, end, replacement);\n        }\n\n        if (!hasReplaced) {\n          return null;\n        }\n\n        /** @type {TransformResult} */\n        const result: TransformResult = { code: s.toString() };\n        if (sourcemap) {\n          result.map = s.generateMap({ hires: true });\n        }\n        return result;\n      }\n    },\n  };\n}\n\nconst STRINGIFY_SPACES = 2;\n","import type { RollupPlugin } from \"../utils.js\";\nimport { createReplacePlugin } from \"./replace.js\";\n\n/**\n * Replaces `import.meta` environment annotations with constants depending on\n * the specified mode.\n *\n * If no mode is specified, the mode defaults to `process.env[\"MODE\"]`. If\n * `process.env[\"MODE\"]` is not set, the mode defaults to `\"development\"`.\n *\n * If you want to control this plugin without relying on ambient environment\n * variables, you should specify the mode explicitly.\n *\n * Replacements:\n *\n * | source                 | replacement rule                                 |\n * | ---------------------- | ------------------------------------------------ |\n * | `import.meta.env.MODE` | the specified mode (string)                      |\n * | `import.meta.env.DEV`  | true if the mode is \"development\" (boolean)      |\n * | `import.meta.env.PROD` | true if the mode is \"production\" (boolean)       |\n *\n * It is possible for both `DEV` and `PROD` to be false (if the specified mode\n * is something other than `\"development\"` or `\"production\"`). In general, this\n * is not recommended when using this plugin.\n */\nexport default (mode = process.env[\"MODE\"] ?? \"development\"): RollupPlugin => {\n  const DEV = mode === \"development\";\n  const PROD = mode === \"production\";\n  const STARBEAM_TRACE = process.env[\"STARBEAM_TRACE\"] ?? false;\n\n  return createReplacePlugin(\n    (id) => /\\.(j|t)sx?$/.test(id),\n    {\n      \"import.meta.env.MODE\": mode,\n      \"import.meta.env.DEV\": DEV ? \"true\" : \"false\",\n      \"import.meta.env.PROD\": PROD ? \"true\" : \"false\",\n      \"import.meta.env.STARBEAM_TRACE\": STARBEAM_TRACE ? \"true\" : \"false\",\n    },\n    true,\n  );\n};\n","import { readFileSync } from \"node:fs\";\n\nimport type { RollupPlugin } from \"../utils.js\";\n\nconst INLINE_PREFIX = \"\\0inline:\";\n\n/**\n * Inlines any imports that end in `?inline` into the importing module as a\n * string.\n *\n * This adds Vite's `?inline` feature to standalone rollup builds.\n */\nexport default (): RollupPlugin => {\n  return {\n    name: \"inline\",\n\n    async resolveId(source, importer, options) {\n      const path = removeTrailing(source, \"?inline\");\n\n      if (path) {\n        const resolved = await this.resolve(path, importer, options);\n\n        if (resolved && !resolved.external) {\n          await this.load(resolved);\n          return INLINE_PREFIX + resolved.id;\n        }\n      }\n    },\n\n    async load(id) {\n      if (id.startsWith(INLINE_PREFIX)) {\n        const path = id.slice(INLINE_PREFIX.length);\n        const code = readFileSync(path, \"utf8\");\n\n        return Promise.resolve({\n          code: `export default ${JSON.stringify(code)};`,\n        });\n      }\n    },\n  };\n};\n\nconst FIRST_CHAR = 0;\n\nfunction removeTrailing(source: string, trailing: string): string | undefined {\n  if (source.endsWith(trailing)) {\n    return source.slice(FIRST_CHAR, -trailing.length);\n  }\n}\n","import type { RollupExternal } from \"@starbeam-dev/core\";\nimport typescriptLibrary from \"typescript\";\n\n/**\n * The package should be inlined into the output. In this situation, the `external` function should\n * return `false`. This is the default behavior.\n */\nexport const INLINE = false satisfies RollupExternal;\n\n/**\n * The package should be treated as an external dependency. In this situation, the `external` function\n * should return `true`. This is unusual and should be used when:\n *\n * - The package is a \"helper library\" (such as tslib) that we don't want to make a real dependency\n *   of the published package.\n * - (for now) The package doesn't have good support for ESM (i.e. `type: module` in package.json)\n *   but rollup will handle it for us.\n */\nexport const EXTERNAL = true satisfies RollupExternal;\n\nexport const {\n  ImportsNotUsedAsValues,\n  JsxEmit,\n  ModuleKind,\n  ModuleResolutionKind,\n  ScriptTarget,\n  ModuleDetectionKind,\n} = typescriptLibrary;\n","/* eslint-disable no-console */\nimport { join } from \"node:path\";\n\nimport type {\n  ExternalConfig,\n  NormalizedExternalOperator,\n  NormalizedExternalOption,\n  PackageInfo,\n  RollupExternal,\n} from \"@starbeam-dev/core\";\n\nimport { EXTERNAL, INLINE } from \"../../constants.js\";\nimport type { RollupPlugin } from \"../utils.js\";\n\n/**\n * @typedef {import(\"#core\").PackageInfo} PackageInfo\n */\n\n/**\n * A plugin that applies the default starbeam-dev externals rules to the builds\n * for the specified package.\n *\n * When an import is \"external\", it is left as-is in the built package. When an\n * import is \"inline\", it is combined with the built package's main file and\n * further optimized.\n *\n * In general, it's better to inline an import if any of the following are true:\n *\n * 1. It is only used by this package.\n * 2. Its exports are easy to optimize by a minifier in production builds (e.g.\n *    exports that are simple functions that have no behavior or simply return\n *    its argument). Functions that use `import.meta.env.DEV` guards around\n *    behavior that would be tricky to optimize are still good candidates for\n *    inlining.\n * 3. More generally, when inlining the import in production mode is likely to\n *    save more bytes than the bytes lost due to duplication.\n *\n * ## Rules\n *\n * 1. Relative imports: If the import starts with a `.`, then it is an inline\n *    import.\n * 2. Custom rules: If the `starbeam:inline` key in `package.json` specifies a\n *    rule for a dependency, use it. You can use custom rules to override any of\n *    the default rules below.\n * 3. [TODO] Custom workspace rules: If the `starbeam:inline` key in the\n *    `package.json` for the workspace root specifies a rule for a dependency,\n *    use it.\n * 4. Helper libraries: If the import is one of the well-known helper libraries,\n *    then it is an inline import.\n * 5. Absolute imports: If the import starts with `/`, then it is an inline\n *    import. This is because absolute imports are usually relative imports\n *    previously resolved by the build process. In general, you should not use\n *    absolute imports in your source code when using this plugin (and probably\n *    in general).\n * 6. Import map imports: If the import starts with `#`, then it is an inline\n *    import. Since import-map imports typically resolve to relative imports,\n *    the current behavior is to inline them.\n * 7. If the `starbeam:external` key in `package.json` specifies a rule for a\n *    dependency, use it.\n *\n * It would probably be more correct to attempt to resolve import map imports\n * and then apply the rules above to the resolved imports. Please file an issue\n * describing your situation if you need this.\n *\n * ## Well-Known Helper Libraries\n *\n * - `@babel/runtime/*`\n * - `tslib`\n * - `@swc/core`\n *\n * ## Manifest Rules (`starbeam:external` keys)\n *\n * The `starbeam:inline` key is either an array of rules or a rules object.\n *\n * ### Rule Pattern\n *\n * A rule pattern is a string, one of the following:\n *\n * - The name of a package listed in the `dependencies` or\n *   `optionalDependencies` field  of the `package.json` file\n * - A pattern that ends in a `*` (e.g. `@starbeam/*`) and matches the name of\n *   at least one package listed in the `dependencies` or\n *   `optionalDependencies`. The `*` matches one or more characters that are\n *   valid as part of an npm package name.\n * - The special pattern `(helpers)`. This matches all of the well-known helper\n *   libraries.\n *\n * ### Rules Array\n *\n * The easiest way to specify inlining rules is by specifying an array of\n * patterns.\n *\n * Example:\n *\n * ```json\n * {\n *   \"dependencies\": {\n *     \"react\": \"^18.2.0\",\n *     \"lodash\": \"^4.17.21\"\n *   },\n *\n *   \"starbeam:inline\": [\"lodash\"]\n * }\n * ```\n *\n * Any patterns in the array will be configured to be inlined. These patterns\n * supersede the default behavior.\n *\n * ### Rules Object\n *\n * Each key in the object is a rule pattern, and the value is either \"inline\" or\n * \"external\".\n *\n * Example:\n *\n * ```json\n * {\n *   \"dependencies\": {\n *     \"react\": \"^18.2.0\",\n *     \"lodash\": \"^4.17.21\"\n *   },\n *\n *   \"starbeam:inline\": {\n *     \"loadash\": \"inline\"\n *   }\n * }\n * ```\n *\n * In this example, the `react` dependency is externalized, and the `lodash`\n * dependency is inlined.\n *\n * The default behavior is to externalize all dependencies, so you don't need to\n * specify \"external\" in a rules object unless you want to supersede a later\n * rule.\n *\n * Example:\n *\n * ```json\n * {\n *   \"dependencies\": {\n *     \"react\": \"^18.2.0\",\n *     \"lodash.map\": \"^4.17.21\",\n *     \"lodash.merge\": \"^4.17.21\"\n *     \"lodash.flat-map\": \"^4.17.21\"\n *   },\n *\n *   \"starbeam:inline\": {\n *     \"lodash.merge\": \"external\",\n *     \"lodash.*\": \"inline\"\n *   }\n * }\n * ```\n *\n * In this example, `react` and `lodash.merge` are externalized, and\n * `lodash.map` and `lodash.flat-map` are inlined.\n *\n * ### Rule Objects in a Rules Array\n *\n * When you have a lot of inline rules and only a handful of externals\n * overrides, it's nice to be able to avoid repeating `: \"inline\"` over and over\n * again.\n *\n * In this situation, you can include rule objects in a rules array.\n *\n * Example:\n *\n * Instead of this:\n *\n * ```json\n * \"starbeam:inline\": {\n *   \"lodash.merge\": \"external\",\n *   \"lodash.*\": \"inline\"\n * }\n * ```\n *\n * You can do this:\n *\n * ```json\n * \"starbeam:inline\": [\n *   { \"lodash.merge\": \"external\" },\n *   \"lodash.*\"\n * ]\n * ```\n *\n * ## Matching Order for Custom Rules\n *\n * Custom rules are matched in the order they are listed in the\n * `starbeam:external` key.\n *\n * Earlier rules in the rule array take precedence over later rules. Earlier\n * rules in an rules object take precedence over later rules in the same rule\n * object.\n *\n * ## Development and Peer Dependencies\n *\n * Since development dependencies are not intended to be used at runtime, they\n * should never be imported from runtime code, and therefore should never be\n * included in the build.\n *\n * Since peer dependencies are intended to be supplied by a dependent package\n * (i.e. the package including the package you are building), they are always\n * external and should not be listed in the `starbeam:external` key.\n *\n * @param {PackageInfo} pkg\n * @returns {import(\"rollup\").Plugin}\n */\nexport default function externals(pkg: PackageInfo): RollupPlugin {\n  const isExternal = external(pkg);\n\n  return {\n    name: \"starbeam:externals\",\n\n    resolveId(id) {\n      if (isExternal(id)) {\n        return { id, external: true };\n      }\n    },\n  };\n}\n\n/**\n * @param {PackageInfo} pkg\n * @returns\n */\nfunction external(pkg: PackageInfo) {\n  /**\n   * @param {string} id\n   * @returns {boolean}\n   */\n  return (id: string): boolean => {\n    // Inline relative modules.\n    if (id.startsWith(\".\")) {\n      return INLINE;\n    }\n\n    // Resolve custom rules. These rules include the default behavior of\n    // well-known helper libraries.\n    for (const rule of pkg.starbeam.inline) {\n      const isExternal = resolveIsExternal(rule, id);\n      if (isExternal !== undefined) return isExternal;\n    }\n\n    // Allow custom rules to override the default behavior\n    // of `#` and `/` dependencies.\n    if (id.startsWith(\"#\") || id.startsWith(\"/\")) {\n      return INLINE;\n    }\n\n    const strictExternals = pkg.starbeam.strict.externals;\n    if (strictExternals !== \"allow\") {\n      const message = [\n        `The external dependency ${id} is included in your compiled output. This means that your compiled output will contain a runtime import of that package.`,\n        `This is the default behavior of starbeam-dev, but you did not specify an inline rule for ${id}, and there is no built-in rule that applies to ${id}.`,\n      ];\n\n      if (strictExternals === \"error\") {\n        const error = [\n          `Unexpected external dependency: ${id}.`,\n          ...message,\n          `This is an error because you are in strict externals mode (${strictExternals}), as specified in \"starbeam:strict\" in your package.json at:\\n  ${join(\n            pkg.root,\n            \"package.json\",\n          )})`,\n        ].join(\"\\n\\n\");\n        throw Error(error);\n      } else {\n        console.warn(\n          [\n            ...message,\n            `This message appears because you are in strict externals mode (${strictExternals}), as specified in \"starbeam:strict\" in your package.json at:\\n  ${join(\n              pkg.root,\n              \"package.json\",\n            )})`,\n          ].join(\"\\n\"),\n        );\n      }\n    }\n\n    return true;\n  };\n}\n\nfunction resolveIsExternal(\n  option: NormalizedExternalOption,\n  id: string,\n): RollupExternal | undefined {\n  return findExternalFn(option)(id);\n\n  /**\n   * @param {import(\"#core\").NormalizedExternalOption} option\n   * @returns {(id: string) => import(\"#core\").RollupExternal | undefined}\n   */\n  function findExternalFn([operator, name, config]: NormalizedExternalOption): (\n    id: string,\n  ) => RollupExternal | undefined {\n    const find = operatorFn(operator);\n    return (id) => (find(id, name) ? fromConfig(config) : undefined);\n  }\n\n  /**\n   * @param {import(\"#core\").ExternalConfig | undefined} config\n   * @returns {import(\"#core\").RollupExternal | undefined}\n   */\n  function fromConfig(\n    config: ExternalConfig | undefined,\n  ): RollupExternal | undefined {\n    switch (config) {\n      case \"external\":\n        return EXTERNAL;\n      case \"inline\":\n        return INLINE;\n      case undefined:\n        return undefined;\n    }\n  }\n\n  function operatorFn(\n    operator: NormalizedExternalOperator,\n  ): (id: string, key: string) => boolean {\n    switch (operator) {\n      case \"startsWith\":\n        return (id, key) => id.startsWith(key);\n      case \"is\":\n        return (id, key) => id === key;\n    }\n  }\n}\n","import { createRequire } from \"node:module\";\n\nimport type { PackageInfo } from \"@starbeam-dev/core\";\nimport type { JscConfig, ReactConfig, TransformConfig } from \"@swc/core\";\nimport { getTsconfig } from \"get-tsconfig\";\n\nimport type { CompilerOptionsJson } from \"../ts.js\";\nimport type { RollupPlugin } from \"../utils.js\";\n\nconst require = createRequire(import.meta.url);\n\nconst rollupTS =\n  require(\"rollup-plugin-ts\") as typeof import(\"rollup-plugin-ts\").default;\n\n/**\n * Build a library with TypeScript in the specified mode.\n *\n * This plugin uses swc (via `@swc/core`) to efficiently compile TypeScript to\n * JavaScript.\n *\n * ## Assumptions\n *\n * You are using at least TypeScript 5.0.\n *\n * You are using the (large) subset of TypeScript that can be compiled by\n * evaluating a single module and stripping out type-specific features. You are\n * not using features of TypeScript that require multi-module analysis to\n * determine how to compile a single module.\n *\n * - You should not use `const` enums, but if you do, they will be converted\n *   into normal enums.\n * - All import paths that refer to non-existent JavaScript modules (type-only\n *   modules) are imported using `import type`.\n * - All imports that do not refer to a JavaScript value are imported as part of\n *   an `import type` statement or are annotated with `type` (i.e. `import {\n *   map, type MapFn } from \"map\"`).\n *\n * ## Recommendations\n *\n * To ensure that your code satisfies these assumptions, we recommend the\n * following tsconfig options:\n *\n * <dl>\n *   <dt>`verbatimModuleSyntax`: true</dt>\n *   <dd>\n *     You will get a TypeScript error if one of your imports is only\n *     used as a type but does not include the `type` specifier.\n *   </dd>\n * </dl>\n *\n * We also recommend the use of `@typescript-eslint/consistent-type-imports` and\n * `@typescript-eslint/no-import-type-side-effects`. These auto-fixable lints\n * will error if you don't use `import type` on an import statement that is\n * never used as a value. These lints will also ensure that any named imports\n * that are only used as types are annotated with `type`.\n *\n * If you're using vscode, you can enable \"source.fixAll\" in\n * `editor.codeActionOnSave` and imports will automatically be updated if you\n * need to add or remove `import type`.\n *\n * ## Type Checking\n *\n * > **TL;DR** This plugin does **not** typecheck your code. It is intended to\n * > be run after verifying your code using tools such as `tsc` and `eslint` and\n * > after successfully running your tests.\n *\n * Now for the longer version...\n *\n * **Compiling** a library is a separate step from **verifying** the library.\n *\n * Conversationally, people refer to the process of verifying and compiling a\n * library as \"the build\" (i.e. \"failing the build\").\n *\n * This is largely an artifact of workflows in other languages, such as Java,\n * C++ and Rust. In these languages, the *compiler* performs a large amount of\n * verification before compilation can begin.\n *\n * Even in those environments, many projects perform additional verification\n * steps (such as linting and testing) before creating and publishing the\n * compilation artifacts.\n *\n * But in **our** environment, virtually the entire verification step can be\n * performed before the compilation step.\n *\n * > Adding to the confusion, the tool that you use to *verify* your TypeScript\n * > code is called `tsc`. Even more confusingly, `tsc` is intended to be a\n * > good-enough reference compiler for TypeScript code. In practice, though, it\n * > makes more sense to use `tsc` as part of a comprehensive *verification*\n * > strategy and to use other tools (such as `esbuild` or `swc`) to compile\n * > your TypeScript code.\n *\n * ## Verify Separately\n *\n * This plugin is intended to be used as part of a build process that runs the\n * verification step first, and only invokes the compilation step once the\n * verification step has completed.\n *\n * These same verification steps should run in your CI pipeline.\n *\n * During development, we recommend that you use the same verification tools in\n * your editor, which can help developers avoid submitting pull requests that\n * will fail verification.\n */\nexport default function typescript(\n  mode: \"development\" | \"production\" | undefined,\n) {\n  return (pkg: PackageInfo, config: CompilerOptionsJson): RollupPlugin => {\n    const { config: tsconfig } = getTsconfig(pkg.root) ?? {};\n    const compilerOptions = tsconfig?.compilerOptions ?? {};\n\n    const transform: Partial<TransformConfig> = {\n      treatConstEnumAsEnum: true,\n    };\n\n    const minify = {\n      mangle: {\n        toplevel: true,\n      },\n      module: true,\n      compress: {\n        module: true,\n        unsafe_math: true,\n        unsafe_symbols: mode === \"production\",\n\n        hoist_funs: true,\n        dead_code: true,\n        defaults: true,\n        unused: true,\n      },\n    } as const;\n\n    let jscConfig: Partial<JscConfig> = { transform };\n\n    if (mode === \"production\") {\n      jscConfig.minify = minify;\n    }\n\n    const fragmentFactory = compilerOptions.jsxFragmentFactory;\n    const jsxFactory = compilerOptions.jsxFactory;\n\n    if (fragmentFactory && jsxFactory)\n      jscConfig = withReact(jscConfig, {\n        pragma: jsxFactory,\n        pragmaFrag: fragmentFactory,\n      });\n\n    const importSource = compilerOptions.jsxImportSource;\n\n    if (importSource)\n      jscConfig = withReact(jscConfig, { runtime: \"automatic\", importSource });\n\n    return rollupTS({\n      transpiler: \"swc\",\n      transpileOnly: true,\n\n      swcConfig: {\n        jsc: jscConfig,\n      },\n\n      tsconfig: {\n        ...compilerOptions,\n        ...config,\n      },\n    });\n  };\n}\n\nfunction withReact(jsc: JscConfig, react: ReactConfig): JscConfig {\n  jsc.transform ??= {};\n  jsc.transform.react = { ...jsc.transform.react, ...react };\n  return jsc;\n}\n","import { execSync } from 'node:child_process';\nimport { join, resolve } from \"node:path\";\n\nimport { Package, type PackageInfo, rootAt } from \"@starbeam-dev/core\";\nimport type { RollupOptions } from \"rollup\";\nimport copy from 'rollup-plugin-copy'\n\nimport externals from \"./plugins/external.js\";\nimport importMeta from \"./plugins/import-meta.js\";\nimport typescript from \"./plugins/typescript.js\";\nimport type { RollupPlugin } from \"./utils.js\";\n\nconst MODES = [\"development\", \"production\", undefined] as const;\n\ninterface CompileOptions {\n  /**\n   * Copy the changelog from the root of the monorepo.\n   * true by default\n   */\n  copyRootChangelog?: boolean;\n}\n\nexport function compile(here: ImportMeta | string, options?: CompileOptions): RollupOptions[] {\n  const pkg = Package.at(here);\n\n  if (pkg === undefined) {\n    throw new Error(`Package not found at ${rootAt(here)}`);\n  }\n\n  return compilePackage(pkg, options || {});\n}\n\nfunction copyRootChangelog(pkg: PackageInfo): RollupPlugin {\n  const monorepoRoot = execSync('git rev-parse --show-toplevel', { encoding: 'utf-8', cwd: pkg.root }).trim();\n  const rootChangelog = join(monorepoRoot, 'CHANGELOG.md');\n\n  // this plugin does not provide types\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n  const includeChangelog = copy({\n    targets: [\n      {\n        src: rootChangelog,\n        dest: '.',\n      }\n    ],\n  });\n\n  return includeChangelog as RollupPlugin;\n\n}\n\n/**\n * @param {import(\"@starbeam-dev/core\").PackageInfo} pkg\n * @param {CompileOptions} options\n * @returns {import(\"rollup\").RollupOptions[]}\n */\nfunction compilePackage(pkg: PackageInfo, options: CompileOptions): RollupOptions[] {\n  return MODES.flatMap((mode) => {\n    const PLUGINS: RollupPlugin[] = [];\n\n    if (mode) {\n      PLUGINS.push(importMeta(mode));\n    }\n\n    const entries = entryPoints(pkg, mode).map((options) => ({\n      ...options,\n      plugins: [\n        ...PLUGINS,\n        externals(pkg),\n        typescript(mode)(pkg, {\n          target: \"esnext\",\n          module: \"esnext\",\n          moduleDetection: \"force\",\n          moduleResolution: \"bundler\",\n          verbatimModuleSyntax: true,\n        }),\n      ],\n    }));\n\n    /**\n      * We only need to do this once, so we'll push it on the first entrypoint's rollup config\n      */\n    if (options.copyRootChangelog ?? true) {\n      const copyPlugin = copyRootChangelog(pkg);\n      // eslint-disable-next-line @typescript-eslint/no-magic-numbers\n      entries[0]?.plugins.push(copyPlugin);\n    }\n\n    return entries;\n  });\n}\n\nfunction entryPoints(\n  pkg: PackageInfo,\n  mode: \"development\" | \"production\" | undefined,\n): import(\"rollup\").RollupOptions[] {\n  const {\n    root,\n    starbeam: { entry },\n  } = pkg;\n\n  function entryPoint([exportName, ts]: [string, string]): RollupOptions {\n    return {\n      input: resolve(root, ts),\n      output: {\n        file: filename({ root, name: exportName, mode, ext: \"js\" }),\n        format: \"esm\",\n        sourcemap: true,\n        exports: \"auto\",\n      },\n      onwarn: (warning, warn) => {\n        switch (warning.code) {\n          case \"CIRCULAR_DEPENDENCY\":\n          case \"EMPTY_BUNDLE\":\n            return;\n          default:\n            warn(warning);\n        }\n      },\n    };\n  }\n\n  if (entry === undefined) {\n    // eslint-disable-next-line no-console\n    console.warn(\"No entry point found for package\", pkg.name);\n    return [];\n  } else {\n    return Object.entries(entry).map(entryPoint);\n  }\n}\n\nfunction filename({\n  root,\n  name,\n  mode,\n  ext,\n}: {\n  root: string;\n  name: string;\n  mode: \"development\" | \"production\" | undefined;\n  ext: \"js\" | \"cjs\";\n}): string {\n  if (mode) {\n    return resolve(root, \"dist\", `${name}.${mode}.${ext}`);\n  } else {\n    return resolve(root, \"dist\", `${name}.${ext}`);\n  }\n}\n"],"names":["default","MagicString","createReplacePlugin","test","replacements","sourcemap","pattern","RegExp","Object","keys","map","str","replace","join","name","transform","code","id","s","hasReplaced","match","exec","start","index","wholeMatch","partialMatch","end","length","replacement","undefined","Error","JSON","stringify","STRINGIFY_SPACES","overwrite","result","toString","generateMap","hires","mode","process","env","DEV","PROD","STARBEAM_TRACE","INLINE_PREFIX","resolveId","source","importer","options","path","removeTrailing","resolved","resolve","external","load","startsWith","slice","readFileSync","Promise","FIRST_CHAR","trailing","endsWith","INLINE","EXTERNAL","externals","pkg","isExternal","rule","starbeam","inline","resolveIsExternal","strictExternals","strict","message","error","root","console","warn","option","findExternalFn","operator","config","find","operatorFn","fromConfig","key","require","createRequire","url","rollupTS","typescript","tsconfig","getTsconfig","compilerOptions","treatConstEnumAsEnum","minify","mangle","toplevel","module","compress","unsafe_math","unsafe_symbols","hoist_funs","dead_code","defaults","unused","jscConfig","fragmentFactory","jsxFragmentFactory","jsxFactory","withReact","pragma","pragmaFrag","importSource","jsxImportSource","runtime","transpiler","transpileOnly","swcConfig","jsc","react","MODES","compile","here","Package","at","rootAt","compilePackage","copyRootChangelog","monorepoRoot","execSync","encoding","cwd","trim","rootChangelog","includeChangelog","copy","targets","src","dest","flatMap","PLUGINS","push","importMeta","entries","entryPoints","plugins","target","moduleDetection","moduleResolution","verbatimModuleSyntax","copyPlugin","entry","entryPoint","exportName","ts","input","output","file","filename","ext","format","exports","onwarn","warning"],"mappings":";;;;;;;;;AAAA;AAMA,MAAM,EAAEA,OAASC,EAAAA,WAAW,EAAE,GAAG,MAAM,OAAO,cAAA,CAAA,CAAA;AAE9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCC,IACM,SAASC,mBAAAA,CACdC,IAA6B,EAC7BC,YAAoC,EACpCC,SAAkB,EAAA;IAElB,MAAMC,OAAAA,GAAU,IAAIC,MAAAA,CAClB,MACEC,GAAAA,MAAAA,CAAOC,IAAI,CAACL,YAAAA,CAAAA,CACTM,GAAG,CAAC,CAACC,GAAAA,GAAAA;QACJ,OAAOA,GAAAA,CAAIC,OAAO,CAAC,uBAAyB,EAAA,MAAA,CAAA,CAAA;KAE7CC,CAAAA,CAAAA,IAAI,CAAC,GAAA,CAAA,GACR,MACF,EAAA,GAAA,CAAA,CAAA;IAGF,OAAO;QACLC,IAAM,EAAA,kBAAA;QAENC,SAAUC,CAAAA,CAAAA,IAAY,EAAEC,EAAU,EAAA;AAChC,YAAA,IAAId,KAAKc,EAAK,CAAA,EAAA;gBACZ,MAAMC,CAAAA,GAAI,IAAIjB,WAAYe,CAAAA,IAAAA,CAAAA,CAAAA;AAC1B,gBAAA,IAAIG,WAAc,GAAA,KAAA,CAAA;gBAElB,IAAIC,KAAAA,CAAAA;AAEJ,gBAAA,MAAQA,KAAQd,GAAAA,OAAAA,CAAQe,IAAI,CAACL,IAAQ,CAAA,CAAA;oBACnCG,WAAc,GAAA,IAAA,CAAA;oBACd,MAAMG,KAAAA,GAAQF,MAAMG,KAAK,CAAA;oBACzB,MAAM,CAACC,UAAYC,EAAAA,YAAAA,CAAa,GAAGL,KAAAA,CAAAA;oBAEnC,MAAMM,GAAAA,GAAMJ,KAAQE,GAAAA,UAAAA,CAAWG,MAAM,CAAA;oBACrC,MAAMC,WAAAA,GAAcxB,YAAY,CAACqB,YAAa,CAAA,CAAA;AAE9C,oBAAA,IAAIG,gBAAgBC,SAAW,EAAA;AAC7B,wBAAA,MAAM,IAAIC,KAAAA,CACR,CAAC,oCAAoC,EAAEL,YAAa,CAAA,wBAAwB,EAAEM,IAAAA,CAAKC,SAAS,CAC1F5B,YACA,EAAA,IAAA,EACA6B,kBACA,CAAC,CAAA,CAAA;AAEP,qBAAA;oBAEAf,CAAEgB,CAAAA,SAAS,CAACZ,KAAAA,EAAOI,GAAKE,EAAAA,WAAAA,CAAAA,CAAAA;AAC1B,iBAAA;AAEA,gBAAA,IAAI,CAACT,WAAa,EAAA;oBAChB,OAAO,IAAA,CAAA;AACT,iBAAA;+CAGA,MAAMgB,MAA0B,GAAA;AAAEnB,oBAAAA,IAAAA,EAAME,EAAEkB,QAAQ,EAAA;AAAG,iBAAA,CAAA;AACrD,gBAAA,IAAI/B,SAAW,EAAA;AACb8B,oBAAAA,MAAAA,CAAOzB,GAAG,GAAGQ,CAAEmB,CAAAA,WAAW,CAAC;wBAAEC,KAAO,EAAA,IAAA;AAAK,qBAAA,CAAA,CAAA;AAC3C,iBAAA;gBACA,OAAOH,MAAAA,CAAAA;AACT,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AACF,CAAA;AAEA,MAAMF,gBAAmB,GAAA,CAAA;;ACzGzB;;;;;;;;;;;;;;;;;;;;;IAsBA,iBAAe,CAAA,CAACM,IAAAA,GAAOC,QAAQC,GAAG,CAAC,MAAO,CAAA,IAAI,aAAa,GAAA;AACzD,IAAA,MAAMC,MAAMH,IAAS,KAAA,aAAA,CAAA;AACrB,IAAA,MAAMI,OAAOJ,IAAS,KAAA,YAAA,CAAA;AACtB,IAAA,MAAMK,cAAiBJ,GAAAA,OAAAA,CAAQC,GAAG,CAAC,iBAAiB,IAAI,KAAA,CAAA;AAExD,IAAA,OAAOvC,oBACL,CAACe,EAAAA,GAAO,aAAcd,CAAAA,IAAI,CAACc,EAC3B,CAAA,EAAA;QACE,sBAAwBsB,EAAAA,IAAAA;AACxB,QAAA,qBAAA,EAAuBG,MAAM,MAAS,GAAA,OAAA;AACtC,QAAA,sBAAA,EAAwBC,OAAO,MAAS,GAAA,OAAA;AACxC,QAAA,gCAAA,EAAkCC,iBAAiB,MAAS,GAAA,OAAA;KAE9D,EAAA,IAAA,CAAA,CAAA;AAEJ,CAAA;;ACpCA,MAAMC,aAAgB,GAAA,WAAA,CAAA;AAEtB;;;;;AAKC,IACD,aAAe,CAAA,IAAA;IACb,OAAO;QACL/B,IAAM,EAAA,QAAA;AAEN,QAAA,MAAMgC,SAAUC,CAAAA,CAAAA,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAA;YACvC,MAAMC,IAAAA,GAAOC,eAAeJ,MAAQ,EAAA,SAAA,CAAA,CAAA;AAEpC,YAAA,IAAIG,IAAM,EAAA;AACR,gBAAA,MAAME,WAAW,MAAM,IAAI,CAACC,OAAO,CAACH,MAAMF,QAAUC,EAAAA,OAAAA,CAAAA,CAAAA;AAEpD,gBAAA,IAAIG,QAAY,IAAA,CAACA,QAASE,CAAAA,QAAQ,EAAE;oBAClC,MAAM,IAAI,CAACC,IAAI,CAACH,QAAAA,CAAAA,CAAAA;oBAChB,OAAOP,aAAAA,GAAgBO,SAASnC,EAAE,CAAA;AACpC,iBAAA;AACF,aAAA;AACF,SAAA;AAEA,QAAA,MAAMsC,MAAKtC,EAAE,EAAA;YACX,IAAIA,EAAAA,CAAGuC,UAAU,CAACX,aAAgB,CAAA,EAAA;AAChC,gBAAA,MAAMK,IAAOjC,GAAAA,EAAAA,CAAGwC,KAAK,CAACZ,cAAclB,MAAM,CAAA,CAAA;gBAC1C,MAAMX,IAAAA,GAAO0C,aAAaR,IAAM,EAAA,MAAA,CAAA,CAAA;gBAEhC,OAAOS,OAAAA,CAAQN,OAAO,CAAC;oBACrBrC,IAAM,EAAA,CAAC,eAAe,EAAEe,IAAAA,CAAKC,SAAS,CAAChB,IAAAA,CAAAA,CAAM,CAAC,CAAC;AACjD,iBAAA,CAAA,CAAA;AACF,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AACF,CAAA,EAAE;AAEF,MAAM4C,UAAa,GAAA,CAAA,CAAA;AAEnB,SAAST,cAAAA,CAAeJ,MAAc,EAAEc,QAAgB,EAAA;IACtD,IAAId,MAAAA,CAAOe,QAAQ,CAACD,QAAW,CAAA,EAAA;AAC7B,QAAA,OAAOd,OAAOU,KAAK,CAACG,UAAY,EAAA,CAACC,SAASlC,MAAM,CAAA,CAAA;AAClD,KAAA;AACF;;AC7CA;;;IAIO,MAAMoC,MAAAA,GAAS,KAA+B,CAAA;AAErD;;;;;;;;IASO,MAAMC,QAAAA,GAAW,IAA8B;;ACJtD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgMe,SAASC,SAAAA,CAAUC,GAAgB,EAAA;AAChD,IAAA,MAAMC,aAAab,QAASY,CAAAA,GAAAA,CAAAA,CAAAA;IAE5B,OAAO;QACLpD,IAAM,EAAA,oBAAA;AAENgC,QAAAA,SAAAA,CAAAA,CAAU7B,EAAE,EAAA;AACV,YAAA,IAAIkD,WAAWlD,EAAK,CAAA,EAAA;gBAClB,OAAO;AAAEA,oBAAAA,EAAAA;oBAAIqC,QAAU,EAAA,IAAA;AAAK,iBAAA,CAAA;AAC9B,aAAA;AACF,SAAA;AACF,KAAA,CAAA;AACF,CAAA;AAEA;;;IAIA,SAASA,SAASY,GAAgB,EAAA;AAChC;;;AAGC,MACD,OAAO,CAACjD,EAAAA,GAAAA;;QAEN,IAAIA,EAAAA,CAAGuC,UAAU,CAAC,GAAM,CAAA,EAAA;YACtB,OAAOO,MAAAA,CAAAA;AACT,SAAA;;;AAIA,QAAA,KAAK,MAAMK,IAAQF,IAAAA,GAAAA,CAAIG,QAAQ,CAACC,MAAM,CAAE;YACtC,MAAMH,UAAAA,GAAaI,kBAAkBH,IAAMnD,EAAAA,EAAAA,CAAAA,CAAAA;YAC3C,IAAIkD,UAAAA,KAAetC,WAAW,OAAOsC,UAAAA,CAAAA;AACvC,SAAA;;;AAIA,QAAA,IAAIlD,GAAGuC,UAAU,CAAC,QAAQvC,EAAGuC,CAAAA,UAAU,CAAC,GAAM,CAAA,EAAA;YAC5C,OAAOO,MAAAA,CAAAA;AACT,SAAA;AAEA,QAAA,MAAMS,kBAAkBN,GAAIG,CAAAA,QAAQ,CAACI,MAAM,CAACR,SAAS,CAAA;AACrD,QAAA,IAAIO,oBAAoB,OAAS,EAAA;AAC/B,YAAA,MAAME,OAAU,GAAA;AACd,gBAAA,CAAC,wBAAwB,EAAEzD,EAAG,CAAA,yHAAyH,CAAC;AACxJ,gBAAA,CAAC,yFAAyF,EAAEA,EAAAA,CAAG,gDAAgD,EAAEA,EAAAA,CAAG,CAAC,CAAC;AACvJ,aAAA,CAAA;AAED,YAAA,IAAIuD,oBAAoB,OAAS,EAAA;AAC/B,gBAAA,MAAMG,KAAQ,GAAA;AACZ,oBAAA,CAAC,gCAAgC,EAAE1D,EAAG,CAAA,CAAC,CAAC;AACrCyD,oBAAAA,GAAAA,OAAAA;oBACH,CAAC,2DAA2D,EAAEF,eAAAA,CAAgB,iEAAiE,EAAE3D,IAC/IqD,CAAAA,GAAAA,CAAIU,IAAI,EACR,cACA,CAAA,CAAA,CAAC,CAAC;AACL,iBAAA,CAAC/D,IAAI,CAAC,MAAA,CAAA,CAAA;AACP,gBAAA,MAAMiB,KAAM6C,CAAAA,KAAAA,CAAAA,CAAAA;aACP,MAAA;AACLE,gBAAAA,OAAAA,CAAQC,IAAI,CACV;AACKJ,oBAAAA,GAAAA,OAAAA;oBACH,CAAC,+DAA+D,EAAEF,eAAAA,CAAgB,iEAAiE,EAAE3D,IACnJqD,CAAAA,GAAAA,CAAIU,IAAI,EACR,cACA,CAAA,CAAA,CAAC,CAAC;AACL,iBAAA,CAAC/D,IAAI,CAAC,IAAA,CAAA,CAAA,CAAA;AAEX,aAAA;AACF,SAAA;QAEA,OAAO,IAAA,CAAA;AACT,KAAA,CAAA;AACF,CAAA;AAEA,SAAS0D,iBAAAA,CACPQ,MAAgC,EAChC9D,EAAU,EAAA;AAEV,IAAA,OAAO+D,eAAeD,MAAQ9D,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAE9B;;;AAGC,MACD,SAAS+D,cAAAA,CAAe,CAACC,QAAAA,EAAUnE,MAAMoE,MAAiC,CAAA,EAAA;AAGxE,QAAA,MAAMC,OAAOC,UAAWH,CAAAA,QAAAA,CAAAA,CAAAA;AACxB,QAAA,OAAO,CAAChE,EAAQkE,GAAAA,IAAAA,CAAKlE,EAAIH,EAAAA,IAAAA,CAAAA,GAAQuE,WAAWH,MAAUrD,CAAAA,GAAAA,SAAAA,CAAAA;AACxD,KAAA;AAEA;;;MAIA,SAASwD,WACPH,MAAkC,EAAA;QAElC,OAAQA,MAAAA;YACN,KAAK,UAAA;gBACH,OAAOlB,QAAAA,CAAAA;YACT,KAAK,QAAA;gBACH,OAAOD,MAAAA,CAAAA;YACT,KAAKlC,SAAAA;gBACH,OAAOA,SAAAA,CAAAA;AACX,SAAA;AACF,KAAA;AAEA,IAAA,SAASuD,WACPH,QAAoC,EAAA;QAEpC,OAAQA,QAAAA;YACN,KAAK,YAAA;AACH,gBAAA,OAAO,CAAChE,EAAAA,EAAIqE,GAAQrE,GAAAA,EAAAA,CAAGuC,UAAU,CAAC8B,GAAAA,CAAAA,CAAAA;YACpC,KAAK,IAAA;gBACH,OAAO,CAACrE,EAAIqE,EAAAA,GAAAA,GAAQrE,EAAOqE,KAAAA,GAAAA,CAAAA;AAC/B,SAAA;AACF,KAAA;AACF;;AC7TA,MAAMC,OAAAA,GAAUC,aAAc,CAAA,MAAA,CAAA,IAAA,CAAYC,GAAG,CAAA,CAAA;AAE7C,MAAMC,WACJH,OAAQ,CAAA,kBAAA,CAAA,CAAA;AAEV;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyFe,SAASI,UAAAA,CACtBpD,IAA8C,EAAA;AAE9C,IAAA,OAAO,CAAC2B,GAAkBgB,EAAAA,MAAAA,GAAAA;QACxB,MAAM,EAAEA,QAAQU,QAAQ,EAAE,GAAGC,WAAY3B,CAAAA,GAAAA,CAAIU,IAAI,CAAA,IAAK,EAAC,CAAA;QACvD,MAAMkB,eAAAA,GAAkBF,QAAUE,EAAAA,eAAAA,IAAmB,EAAC,CAAA;AAEtD,QAAA,MAAM/E,SAAsC,GAAA;YAC1CgF,oBAAsB,EAAA,IAAA;AACxB,SAAA,CAAA;AAEA,QAAA,MAAMC,MAAS,GAAA;YACbC,MAAQ,EAAA;gBACNC,QAAU,EAAA,IAAA;AACZ,aAAA;YACAC,MAAQ,EAAA,IAAA;YACRC,QAAU,EAAA;gBACRD,MAAQ,EAAA,IAAA;gBACRE,WAAa,EAAA,IAAA;AACbC,gBAAAA,cAAAA,EAAgB/D,IAAS,KAAA,YAAA;gBAEzBgE,UAAY,EAAA,IAAA;gBACZC,SAAW,EAAA,IAAA;gBACXC,QAAU,EAAA,IAAA;gBACVC,MAAQ,EAAA,IAAA;AACV,aAAA;AACF,SAAA,CAAA;AAEA,QAAA,IAAIC,SAAgC,GAAA;AAAE5F,YAAAA,SAAAA;AAAU,SAAA,CAAA;AAEhD,QAAA,IAAIwB,SAAS,YAAc,EAAA;AACzBoE,YAAAA,SAAAA,CAAUX,MAAM,GAAGA,MAAAA,CAAAA;AACrB,SAAA;QAEA,MAAMY,eAAAA,GAAkBd,gBAAgBe,kBAAkB,CAAA;QAC1D,MAAMC,UAAAA,GAAahB,gBAAgBgB,UAAU,CAAA;AAE7C,QAAA,IAAIF,eAAmBE,IAAAA,UAAAA,EACrBH,SAAYI,GAAAA,SAAAA,CAAUJ,SAAW,EAAA;YAC/BK,MAAQF,EAAAA,UAAAA;YACRG,UAAYL,EAAAA,eAAAA;AACd,SAAA,CAAA,CAAA;QAEF,MAAMM,YAAAA,GAAepB,gBAAgBqB,eAAe,CAAA;QAEpD,IAAID,YAAAA,EACFP,SAAYI,GAAAA,SAAAA,CAAUJ,SAAW,EAAA;YAAES,OAAS,EAAA,WAAA;AAAaF,YAAAA,YAAAA;AAAa,SAAA,CAAA,CAAA;AAExE,QAAA,OAAOxB,QAAS,CAAA;YACd2B,UAAY,EAAA,KAAA;YACZC,aAAe,EAAA,IAAA;YAEfC,SAAW,EAAA;gBACTC,GAAKb,EAAAA,SAAAA;AACP,aAAA;YAEAf,QAAU,EAAA;AACR,gBAAA,GAAGE,eAAe;AAClB,gBAAA,GAAGZ,MAAM;AACX,aAAA;AACF,SAAA,CAAA,CAAA;AACF,KAAA,CAAA;AACF,CAAA;AAEA,SAAS6B,SAAAA,CAAUS,GAAc,EAAEC,KAAkB,EAAA;IACnDD,GAAIzG,CAAAA,SAAS,KAAK,EAAC,CAAA;IACnByG,GAAIzG,CAAAA,SAAS,CAAC0G,KAAK,GAAG;QAAE,GAAGD,GAAAA,CAAIzG,SAAS,CAAC0G,KAAK;AAAE,QAAA,GAAGA,KAAK;AAAC,KAAA,CAAA;IACzD,OAAOD,GAAAA,CAAAA;AACT;;AC/JA,MAAME,KAAQ,GAAA;AAAC,IAAA,aAAA;AAAe,IAAA,YAAA;AAAc7F,IAAAA,SAAAA;AAAU,CAAA,CAAA;AAU/C,SAAS8F,OAAAA,CAAQC,IAAyB,EAAE3E,OAAwB,EAAA;IACzE,MAAMiB,GAAAA,GAAM2D,OAAQC,CAAAA,EAAE,CAACF,IAAAA,CAAAA,CAAAA;AAEvB,IAAA,IAAI1D,QAAQrC,SAAW,EAAA;AACrB,QAAA,MAAM,IAAIC,KAAM,CAAA,CAAC,qBAAqB,EAAEiG,MAAAA,CAAOH,MAAM,CAAC,CAAA,CAAA;AACxD,KAAA;IAEA,OAAOI,cAAAA,CAAe9D,GAAKjB,EAAAA,OAAAA,IAAW,EAAC,CAAA,CAAA;AACzC,CAAA;AAEA,SAASgF,kBAAkB/D,GAAgB,EAAA;IACzC,MAAMgE,YAAAA,GAAeC,SAAS,+BAAiC,EAAA;QAAEC,QAAU,EAAA,OAAA;AAASC,QAAAA,GAAAA,EAAKnE,IAAIU,IAAI;AAAC,KAAA,CAAA,CAAG0D,IAAI,EAAA,CAAA;IACzG,MAAMC,aAAAA,GAAgB1H,KAAKqH,YAAc,EAAA,cAAA,CAAA,CAAA;;;AAIzC,IAAA,MAAMM,mBAAmBC,IAAK,CAAA;QAC5BC,OAAS,EAAA;AACP,YAAA;gBACEC,GAAKJ,EAAAA,aAAAA;gBACLK,IAAM,EAAA,GAAA;AACR,aAAA;AACD,SAAA;AACH,KAAA,CAAA,CAAA;IAEA,OAAOJ,gBAAAA,CAAAA;AAET,CAAA;AAEA;;;;AAIC,IACD,SAASR,cAAAA,CAAe9D,GAAgB,EAAEjB,OAAuB,EAAA;IAC/D,OAAOyE,KAAAA,CAAMmB,OAAO,CAAC,CAACtG,IAAAA,GAAAA;AACpB,QAAA,MAAMuG,UAA0B,EAAE,CAAA;AAElC,QAAA,IAAIvG,IAAM,EAAA;YACRuG,OAAQC,CAAAA,IAAI,CAACC,UAAWzG,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAC1B,SAAA;QAEA,MAAM0G,OAAAA,GAAUC,YAAYhF,GAAK3B,EAAAA,IAAAA,CAAAA,CAAM7B,GAAG,CAAC,CAACuC,WAAa;AACvD,gBAAA,GAAGA,OAAO;gBACVkG,OAAS,EAAA;AACJL,oBAAAA,GAAAA,OAAAA;oBACH7E,SAAUC,CAAAA,GAAAA,CAAAA;AACVyB,oBAAAA,UAAAA,CAAWpD,MAAM2B,GAAK,EAAA;wBACpBkF,MAAQ,EAAA,QAAA;wBACRjD,MAAQ,EAAA,QAAA;wBACRkD,eAAiB,EAAA,OAAA;wBACjBC,gBAAkB,EAAA,SAAA;wBAClBC,oBAAsB,EAAA,IAAA;AACxB,qBAAA,CAAA;AACD,iBAAA;aACH,CAAA,CAAA,CAAA;AAEA;;AAEE,SACF,IAAItG,OAAAA,CAAQgF,iBAAiB,IAAI,IAAM,EAAA;AACrC,YAAA,MAAMuB,aAAavB,iBAAkB/D,CAAAA,GAAAA,CAAAA,CAAAA;;AAErC+E,YAAAA,OAAO,CAAC,CAAA,CAAE,EAAEE,OAAAA,CAAQJ,IAAKS,CAAAA,UAAAA,CAAAA,CAAAA;AAC3B,SAAA;QAEA,OAAOP,OAAAA,CAAAA;AACT,KAAA,CAAA,CAAA;AACF,CAAA;AAEA,SAASC,WAAAA,CACPhF,GAAgB,EAChB3B,IAA8C,EAAA;IAE9C,MAAM,EACJqC,IAAI,EACJP,QAAAA,EAAU,EAAEoF,KAAK,EAAE,EACpB,GAAGvF,GAAAA,CAAAA;IAEJ,SAASwF,UAAAA,CAAW,CAACC,UAAAA,EAAYC,EAAqB,CAAA,EAAA;QACpD,OAAO;AACLC,YAAAA,KAAAA,EAAOxG,QAAQuB,IAAMgF,EAAAA,EAAAA,CAAAA;YACrBE,MAAQ,EAAA;AACNC,gBAAAA,IAAAA,EAAMC,QAAS,CAAA;AAAEpF,oBAAAA,IAAAA;oBAAM9D,IAAM6I,EAAAA,UAAAA;AAAYpH,oBAAAA,IAAAA;oBAAM0H,GAAK,EAAA,IAAA;AAAK,iBAAA,CAAA;gBACzDC,MAAQ,EAAA,KAAA;gBACR7J,SAAW,EAAA,IAAA;gBACX8J,OAAS,EAAA,MAAA;AACX,aAAA;AACAC,YAAAA,MAAAA,EAAQ,CAACC,OAASvF,EAAAA,IAAAA,GAAAA;AAChB,gBAAA,OAAQuF,QAAQrJ,IAAI;oBAClB,KAAK,qBAAA,CAAA;oBACL,KAAK,cAAA;AACH,wBAAA,OAAA;AACF,oBAAA;wBACE8D,IAAKuF,CAAAA,OAAAA,CAAAA,CAAAA;AACT,iBAAA;AACF,aAAA;AACF,SAAA,CAAA;AACF,KAAA;AAEA,IAAA,IAAIZ,UAAU5H,SAAW,EAAA;;AAEvBgD,QAAAA,OAAAA,CAAQC,IAAI,CAAC,kCAAoCZ,EAAAA,GAAAA,CAAIpD,IAAI,CAAA,CAAA;AACzD,QAAA,OAAO,EAAE,CAAA;KACJ,MAAA;AACL,QAAA,OAAON,MAAOyI,CAAAA,OAAO,CAACQ,KAAAA,CAAAA,CAAO/I,GAAG,CAACgJ,UAAAA,CAAAA,CAAAA;AACnC,KAAA;AACF,CAAA;AAEA,SAASM,QAAAA,CAAS,EAChBpF,IAAI,EACJ9D,IAAI,EACJyB,IAAI,EACJ0H,GAAG,EAMJ,EAAA;AACC,IAAA,IAAI1H,IAAM,EAAA;AACR,QAAA,OAAOc,OAAQuB,CAAAA,IAAAA,EAAM,MAAQ,EAAA,CAAC,EAAE9D,IAAAA,CAAK,CAAC,EAAEyB,IAAK,CAAA,CAAC,EAAE0H,GAAAA,CAAI,CAAC,CAAA,CAAA;KAChD,MAAA;QACL,OAAO5G,OAAAA,CAAQuB,MAAM,MAAQ,EAAA,CAAC,EAAE9D,IAAK,CAAA,CAAC,EAAEmJ,GAAAA,CAAI,CAAC,CAAA,CAAA;AAC/C,KAAA;AACF;;;;"}